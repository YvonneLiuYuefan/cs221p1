Student Name #1: Yuefan Liu
Student ugrad login #1: a4t8

Student Name #2: Hyojin Yi
Student ugrad login #2: x6w8a

Team name (for fun!): Alpha no Go

Acknowledgment that you understand and have followed the course's
collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

[[Yuefan Liu; Hyojin Yi]]

submit using: make handin-proj1

----------------------------------------------------------------------

Approximate hours on project:
36 hours
----------------------------------------------------------------------

For teams, rough breakdown of work:

Hyojin: ArrayQueue
Yuefan: LinkedListQueue, HeapPriorityQueue

----------------------------------------------------------------------

Acknowledgment of assistance:

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to use either of your queue classes to solve Mazes
1, 2, 3, and 4.  Set a large enough delay in the solveMaze function
(like 200000) to watch what's happening.  Do you see why this is called
breadth-first search (BFS)?  How many steps long were your solutions?
How does this compare with DFS?
Maze 1: 58 steps for both DFS and BFS; in comparison to DFS, BFS searches within the closest radii of the start by checking all the branches of the current node before moving onto the next node.
Maze 2: 46 steps for DFS and 14 steps for BFS; since DFS only check one direction, it runs around the maze; BFS checks two directions at the same time, its solution goes directly to the destination.
Maze 3: 247 steps for DFS and 5 steps for BFS; DFS works poorly on this maze since it goes a s-shaped way and does not go back; BFS check branches within the closest radii and cn find destination at the back more easily.
Maze 4: 110 steps for DFS and 90 steps for BFS; the destination is far away from the starting point and is blocked by the "wall", thus the DFS can find a route more quickly while the BFS can find the shorter route with longer time.

2.  Try to solve the blank Sudoku board using your ArrayQueue
and LinkedListQueue classes.  What happens?  Why?

ArrayQueue:A blank sudoku has too many options and the runtime is very long. In this case, DFS is a much better option for solving.

LinkedListQueue:

It takes too long for ArrayQueue and LinkedListQueue to solve the blank Sudoku. While solving a blank sudoku, (for example the first line) what DFS does is set the value of first position and try the rest positions,
but BFS tries every possibility of every position. Thus, BFS will take much longer time to solve the blank sudoku. In order to iterate through all the options the program would have to run all the possibilites, 9^10.


3.  Switch to the medium-difficulty Sudoku problem, and comment
out the delay and the print statements in the solveMaze function.
How long does it take to solve the puzzle using your ArrayQueue
class?  Using your LinkedListQueue class?  Is the difference big?

ArrayQueue: 
real	1m9.860s
user	0m3.199s
sys	0m0.040s
LinkedListQueue: bus error

4.  Edit solve.cpp to switch to the 4x4 and then 5x5 slider puzzles.
Make sure to comment out the delay and print statements in the solveMaze
function.  How long does it take to solve these puzzles with your
HeapPriorityQueue versus my UnsortedPriorityQueue?  For most students,
mine will be faster?  Why might that happen?  Are the asymptotic
runtimes for the heap versus the unsorted array wrong?

4x4 slider:
HeapPriority: 224 steps
real	0m16.071s
user	0m15.502s
sys  	0m0.173s

UnsortedPriorityQueue: 180 steps
real	0m12.946s
user	0m12.502s
sys	  0m0.147s  

5x5 slider:
HeapPriority: 


UnsortedPriorityQueue:


----------------------------------------------------------------------

We will be checking your implementations of ArrayQueue, LinkedListQueue,
and HeapPriorityQueue.
